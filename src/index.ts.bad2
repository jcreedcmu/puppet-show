import bodyParser from 'body-parser';
import express from 'express';
import cookieParser from 'cookie-parser';
import expressSession from 'express-session';
import passport from 'passport';
import { Strategy as LocalStrategy } from 'passport-local';
import path from 'path';

const sessionSecret = process.env['SESSION_SECRET'];
if (sessionSecret === undefined) {
  throw new Error('Need session secret in $SESSION_SECRET');
}

declare module 'express-session' {
  interface SessionData {
    returnTo: string;
  }
}

function ensureLoggedIn(
  req: express.Request,
  res: express.Response,
  next: express.NextFunction
) {
  if (!req.isAuthenticated()) {
    req.session.returnTo = req.originalUrl || req.url;
    return res.redirect('/login');
  }
  next();
}

passport.use(new LocalStrategy(
  (id, password, cb) => {
    console.log('>', id, password);
    if (password == 'password')
      cb(null, { id });
    else
      cb(null, null, { message: 'Authentication Failure' });
  }));

passport.serializeUser((user, cb) => { cb(null, (user as any).id); });
passport.deserializeUser((id, cb) => { cb(null, { id }); });

const app = express();
const port = 3000;

app.set('views', path.join(__dirname, '../views'));
app.set('view engine', 'ejs');

app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(expressSession({ secret: sessionSecret, resave: false, saveUninitialized: false }));

app.use(passport.initialize());
app.use(passport.session());

app.get('/',
  (req, res) => {
    res.render('home', { user: req.user });
  });

app.get('/login',
  (req, res) => {
    res.render('login');
  });

app.post('/login',
  passport.authenticate('local', {
    failureRedirect: '/login',
    failureMessage: 'hello'
  }),
  (req, res) => {
    if (req.session.returnTo)
      res.redirect(req.session.returnTo);
    else
      res.redirect('/');
  });

app.get('/logout',
  (req, res) => {
    req.session.returnTo = undefined;
    req.logout();
    res.redirect('/');
  });

app.get('/profile',
  ensureLoggedIn,
  (req, res) => {
    res.render('profile', { user: req.user });
  });

app.get('/cookie',
  (req, res) => {
    console.log(req);
    res.render('cookie', { cookie: JSON.stringify(req.cookies) });
  });


app.listen(port, '127.0.0.1', () => {
  console.log(`listening on port ${port}`);
});
